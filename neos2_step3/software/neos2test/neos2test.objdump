
neos2test.elf:     file format elf32-littlenios2
neos2test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000498 memsz 0x000004a8 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000480  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  000084a0  000084a0  000014a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000010  000084b8  000084b8  000014b8  2**2
                  ALLOC, SMALL_DATA
  4 .comment      00000023  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000014e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010d6  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000979  00000000  00000000  0000279e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c01  00000000  00000000  00003117  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  00003d18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a6  00000000  00000000  00003f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005fa  00000000  00000000  00004616  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_alt_sim_info 00000040  00000000  00000000  00004c10  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000078  00000000  00000000  00004c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .thread_model 00000003  00000000  00000000  00005b54  2**0
                  CONTENTS, READONLY
 15 .cpu          0000000c  00000000  00000000  00005b57  2**0
                  CONTENTS, READONLY
 16 .qsys         00000001  00000000  00000000  00005b63  2**0
                  CONTENTS, READONLY
 17 .simulation_enabled 00000001  00000000  00000000  00005b64  2**0
                  CONTENTS, READONLY
 18 .sysid_hash   00000004  00000000  00000000  00005b65  2**0
                  CONTENTS, READONLY
 19 .sysid_base   00000004  00000000  00000000  00005b69  2**0
                  CONTENTS, READONLY
 20 .sysid_time   00000004  00000000  00000000  00005b6d  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00005b71  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00005b7c  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00005b87  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  00005b92  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000000d  00000000  00000000  00005b9b  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000316bd  00000000  00000000  00005ba8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
000084a0 l    d  .rodata	00000000 .rodata
000084b8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../neos2test_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008348 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 
000081c8 g     F .text	0000002c alt_main
000084b8 g       *ABS*	00000000 __flash_rwdata_start
000081f4 g     F .text	00000038 alt_putstr
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
000084bc g     O .bss	00000004 alt_argv
000104b8 g       *ABS*	00000000 _gp
0000822c g     F .text	00000004 usleep
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008468 g     F .text	00000008 __udivsi3
000084c8 g       *ABS*	00000000 __bss_end
00008310 g     F .text	00000004 alt_dcache_flush_all
000084b8 g       *ABS*	00000000 __ram_rwdata_end
000084b8 g       *ABS*	00000000 __ram_rodata_end
000084c4 g     O .bss	00000004 jtag_uart_0
00008470 g     F .text	00000008 __umodsi3
000084c8 g       *ABS*	00000000 end
00010000 g       *ABS*	00000000 __alt_stack_pointer
00008254 g     F .text	00000034 altera_avalon_jtag_uart_write
00008020 g     F .text	0000003c _start
00008250 g     F .text	00000004 alt_sys_init
00008478 g     F .text	00000028 __mulsi3
000084b8 g       *ABS*	00000000 __ram_rwdata_start
000084a0 g       *ABS*	00000000 __ram_rodata_start
00008288 g     F .text	00000088 alt_busy_sleep
000084c8 g       *ABS*	00000000 __alt_stack_base
000084b8 g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000068 main
000084b8 g     O .bss	00000004 alt_envp
000083bc g     F .text	00000050 __divsi3
000084a0 g       *ABS*	00000000 __flash_rodata_start
00008230 g     F .text	00000020 alt_irq_init
000084c0 g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
000084b8 g       *ABS*	00000000 _edata
000084c8 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008318 g     F .text	00000008 altera_nios2_qsys_irq_init
0000840c g     F .text	0000005c __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
00008320 g     F .text	00000028 strlen
00008314 g     F .text	00000004 alt_icache_flush_all
000080c4 g     F .text	00000104 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6812e14 	ori	gp,gp,1208
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a12e14 	ori	r2,r2,33976

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e13214 	ori	r3,r3,33992

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00080c40 	call	80c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00081c80 	call	81c8 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <main>:
#include <unistd.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"

int main()
{ 
    805c:	defffb04 	addi	sp,sp,-20
    8060:	dc000115 	stw	r16,4(sp)
	volatile uint16_t t;
	t = 1;

	alt_putstr("Hello from Nios II!\n");
    8064:	01000074 	movhi	r4,1
    8068:	21212804 	addi	r4,r4,-31584
#include "altera_avalon_pio_regs.h"

int main()
{ 
	volatile uint16_t t;
	t = 1;
    806c:	04000044 	movi	r16,1
#include <unistd.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"

int main()
{ 
    8070:	dc800315 	stw	r18,12(sp)
    8074:	dc400215 	stw	r17,8(sp)
    8078:	dfc00415 	stw	ra,16(sp)
	volatile uint16_t t;
	t = 1;
    807c:	dc00000d 	sth	r16,0(sp)
	alt_putstr("Hello from Nios II!\n");

  /* Event loop never exits. */
  while (1)
  {
	  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, t);
    8080:	04400804 	movi	r17,32
int main()
{ 
	volatile uint16_t t;
	t = 1;

	alt_putstr("Hello from Nios II!\n");
    8084:	00081f40 	call	81f4 <alt_putstr>
  /* Event loop never exits. */
  while (1)
  {
	  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, t);
	  t = t*2;
	  if (t == 1024) t = 1;
    8088:	04810004 	movi	r18,1024
	alt_putstr("Hello from Nios II!\n");

  /* Event loop never exits. */
  while (1)
  {
	  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, t);
    808c:	d880000b 	ldhu	r2,0(sp)
    8090:	10bfffcc 	andi	r2,r2,65535
    8094:	88800035 	stwio	r2,0(r17)
	  t = t*2;
    8098:	d880000b 	ldhu	r2,0(sp)
    809c:	1085883a 	add	r2,r2,r2
    80a0:	d880000d 	sth	r2,0(sp)
	  if (t == 1024) t = 1;
    80a4:	d880000b 	ldhu	r2,0(sp)
    80a8:	10bfffcc 	andi	r2,r2,65535
    80ac:	1480011e 	bne	r2,r18,80b4 <main+0x58>
    80b0:	dc00000d 	sth	r16,0(sp)
	  usleep(120000);
    80b4:	010000b4 	movhi	r4,2
    80b8:	21353004 	addi	r4,r4,-11072
    80bc:	000822c0 	call	822c <usleep>
  }
    80c0:	003ff206 	br	808c <main+0x30>

000080c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    80c4:	deffff04 	addi	sp,sp,-4
    80c8:	dfc00015 	stw	ra,0(sp)
    80cc:	00c00074 	movhi	r3,1
    80d0:	18e12e04 	addi	r3,r3,-31560
    80d4:	01000074 	movhi	r4,1
    80d8:	21212e04 	addi	r4,r4,-31560

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    80dc:	1900061e 	bne	r3,r4,80f8 <alt_load+0x34>
    80e0:	00c00074 	movhi	r3,1
    80e4:	18e00804 	addi	r3,r3,-32736
    80e8:	01000074 	movhi	r4,1
    80ec:	21200804 	addi	r4,r4,-32736
    80f0:	1900151e 	bne	r3,r4,8148 <alt_load+0x84>
    80f4:	00000e06 	br	8130 <alt_load+0x6c>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
    80f8:	01400074 	movhi	r5,1
    80fc:	29612e04 	addi	r5,r5,-31560
    8100:	00bfff04 	movi	r2,-4
    8104:	28cbc83a 	sub	r5,r5,r3
    8108:	288a703a 	and	r5,r5,r2
    810c:	0005883a 	mov	r2,zero
    8110:	00000506 	br	8128 <alt_load+0x64>
    8114:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
    8118:	39c00017 	ldw	r7,0(r7)
    811c:	188d883a 	add	r6,r3,r2
    8120:	10800104 	addi	r2,r2,4
    8124:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8128:	117ffa1e 	bne	r2,r5,8114 <alt_load+0x50>
    812c:	003fec06 	br	80e0 <alt_load+0x1c>
    8130:	00c00074 	movhi	r3,1
    8134:	18e12804 	addi	r3,r3,-31584
    8138:	01000074 	movhi	r4,1
    813c:	21212804 	addi	r4,r4,-31584

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8140:	1900131e 	bne	r3,r4,8190 <alt_load+0xcc>
    8144:	00000e06 	br	8180 <alt_load+0xbc>
    8148:	01400074 	movhi	r5,1
    814c:	29600804 	addi	r5,r5,-32736
    8150:	00bfff04 	movi	r2,-4
    8154:	28cbc83a 	sub	r5,r5,r3
    8158:	288a703a 	and	r5,r5,r2
    815c:	0005883a 	mov	r2,zero
    8160:	00000506 	br	8178 <alt_load+0xb4>
    8164:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
    8168:	39c00017 	ldw	r7,0(r7)
    816c:	188d883a 	add	r6,r3,r2
    8170:	10800104 	addi	r2,r2,4
    8174:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8178:	117ffa1e 	bne	r2,r5,8164 <alt_load+0xa0>
    817c:	003fec06 	br	8130 <alt_load+0x6c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8180:	00083100 	call	8310 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8184:	dfc00017 	ldw	ra,0(sp)
    8188:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    818c:	00083141 	jmpi	8314 <alt_icache_flush_all>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
    8190:	01400074 	movhi	r5,1
    8194:	29612e04 	addi	r5,r5,-31560
    8198:	00bfff04 	movi	r2,-4
    819c:	28cbc83a 	sub	r5,r5,r3
    81a0:	288a703a 	and	r5,r5,r2
    81a4:	0005883a 	mov	r2,zero
    81a8:	00000506 	br	81c0 <alt_load+0xfc>
    81ac:	208f883a 	add	r7,r4,r2
    {
      *to++ = *from++;
    81b0:	39c00017 	ldw	r7,0(r7)
    81b4:	188d883a 	add	r6,r3,r2
    81b8:	10800104 	addi	r2,r2,4
    81bc:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    81c0:	117ffa1e 	bne	r2,r5,81ac <alt_load+0xe8>
    81c4:	003fee06 	br	8180 <alt_load+0xbc>

000081c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    81c8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    81cc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    81d0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    81d4:	00082300 	call	8230 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    81d8:	00082500 	call	8250 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    81dc:	d1200217 	ldw	r4,-32760(gp)
    81e0:	d1600117 	ldw	r5,-32764(gp)
    81e4:	d1a00017 	ldw	r6,-32768(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    81e8:	dfc00017 	ldw	ra,0(sp)
    81ec:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    81f0:	000805c1 	jmpi	805c <main>

000081f4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    81f4:	defffe04 	addi	sp,sp,-8
    81f8:	dc000015 	stw	r16,0(sp)
    81fc:	dfc00115 	stw	ra,4(sp)
    8200:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8204:	00083200 	call	8320 <strlen>
    8208:	01000074 	movhi	r4,1
    820c:	21213104 	addi	r4,r4,-31548
    8210:	800b883a 	mov	r5,r16
    8214:	100d883a 	mov	r6,r2
    8218:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    821c:	dfc00117 	ldw	ra,4(sp)
    8220:	dc000017 	ldw	r16,0(sp)
    8224:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8228:	00082541 	jmpi	8254 <altera_avalon_jtag_uart_write>

0000822c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    822c:	00082881 	jmpi	8288 <alt_busy_sleep>

00008230 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8230:	deffff04 	addi	sp,sp,-4
    8234:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    8238:	00083180 	call	8318 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    823c:	00800044 	movi	r2,1
    8240:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8244:	dfc00017 	ldw	ra,0(sp)
    8248:	dec00104 	addi	sp,sp,4
    824c:	f800283a 	ret

00008250 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8250:	f800283a 	ret

00008254 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8254:	20c00017 	ldw	r3,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8258:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    825c:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8260:	19800104 	addi	r6,r3,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8264:	00000606 	br	8280 <altera_avalon_jtag_uart_write+0x2c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8268:	31c00037 	ldwio	r7,0(r6)
    826c:	39ffffec 	andhi	r7,r7,65535
    8270:	383ffd26 	beq	r7,zero,8268 <altera_avalon_jtag_uart_write+0x14>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8274:	29c00007 	ldb	r7,0(r5)
    8278:	29400044 	addi	r5,r5,1
    827c:	19c00035 	stwio	r7,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8280:	293ff936 	bltu	r5,r4,8268 <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    8284:	f800283a 	ret

00008288 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8288:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    828c:	014666b4 	movhi	r5,6554
    8290:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8294:	dc000015 	stw	r16,0(sp)
    8298:	dfc00115 	stw	ra,4(sp)
    829c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    82a0:	00084680 	call	8468 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    82a4:	10001026 	beq	r2,zero,82e8 <alt_busy_sleep+0x60>
    82a8:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    82ac:	01600034 	movhi	r5,32768
    82b0:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    82b4:	013999b4 	movhi	r4,58982
    82b8:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    82bc:	297fffc4 	addi	r5,r5,-1
    82c0:	283ffe1e 	bne	r5,zero,82bc <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    82c4:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    82c8:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    82cc:	18bffb16 	blt	r3,r2,82bc <alt_busy_sleep+0x34>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    82d0:	8009883a 	mov	r4,r16
    82d4:	01400144 	movi	r5,5
    82d8:	00084780 	call	8478 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    82dc:	10bfffc4 	addi	r2,r2,-1
    82e0:	103ffe1e 	bne	r2,zero,82dc <alt_busy_sleep+0x54>
    82e4:	00000506 	br	82fc <alt_busy_sleep+0x74>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    82e8:	8009883a 	mov	r4,r16
    82ec:	01400144 	movi	r5,5
    82f0:	00084780 	call	8478 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    82f4:	10bfffc4 	addi	r2,r2,-1
    82f8:	00bffe16 	blt	zero,r2,82f4 <alt_busy_sleep+0x6c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    82fc:	0005883a 	mov	r2,zero
    8300:	dfc00117 	ldw	ra,4(sp)
    8304:	dc000017 	ldw	r16,0(sp)
    8308:	dec00204 	addi	sp,sp,8
    830c:	f800283a 	ret

00008310 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8310:	f800283a 	ret

00008314 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8314:	f800283a 	ret

00008318 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8318:	000170fa 	wrctl	ienable,zero
    831c:	f800283a 	ret

00008320 <strlen>:
    8320:	20800007 	ldb	r2,0(r4)
    8324:	10000626 	beq	r2,zero,8340 <strlen+0x20>
    8328:	2005883a 	mov	r2,r4
    832c:	10800044 	addi	r2,r2,1
    8330:	10c00007 	ldb	r3,0(r2)
    8334:	183ffd1e 	bne	r3,zero,832c <strlen+0xc>
    8338:	1105c83a 	sub	r2,r2,r4
    833c:	f800283a 	ret
    8340:	0005883a 	mov	r2,zero
    8344:	f800283a 	ret

00008348 <udivmodsi4>:
    8348:	2005883a 	mov	r2,r4
    834c:	2900182e 	bgeu	r5,r4,83b0 <udivmodsi4+0x68>
    8350:	28001716 	blt	r5,zero,83b0 <udivmodsi4+0x68>
    8354:	01000804 	movi	r4,32
    8358:	00c00044 	movi	r3,1
    835c:	00000206 	br	8368 <udivmodsi4+0x20>
    8360:	20001126 	beq	r4,zero,83a8 <udivmodsi4+0x60>
    8364:	28000516 	blt	r5,zero,837c <udivmodsi4+0x34>
    8368:	294b883a 	add	r5,r5,r5
    836c:	213fffc4 	addi	r4,r4,-1
    8370:	18c7883a 	add	r3,r3,r3
    8374:	28bffa36 	bltu	r5,r2,8360 <udivmodsi4+0x18>
    8378:	18000b26 	beq	r3,zero,83a8 <udivmodsi4+0x60>
    837c:	0009883a 	mov	r4,zero
    8380:	11400236 	bltu	r2,r5,838c <udivmodsi4+0x44>
    8384:	1145c83a 	sub	r2,r2,r5
    8388:	20c8b03a 	or	r4,r4,r3
    838c:	1806d07a 	srli	r3,r3,1
    8390:	280ad07a 	srli	r5,r5,1
    8394:	183ffa1e 	bne	r3,zero,8380 <udivmodsi4+0x38>
    8398:	3000021e 	bne	r6,zero,83a4 <udivmodsi4+0x5c>
    839c:	2005883a 	mov	r2,r4
    83a0:	f800283a 	ret
    83a4:	f800283a 	ret
    83a8:	0009883a 	mov	r4,zero
    83ac:	003ffa06 	br	8398 <udivmodsi4+0x50>
    83b0:	00c00044 	movi	r3,1
    83b4:	0009883a 	mov	r4,zero
    83b8:	003ff106 	br	8380 <udivmodsi4+0x38>

000083bc <__divsi3>:
    83bc:	defffe04 	addi	sp,sp,-8
    83c0:	dfc00115 	stw	ra,4(sp)
    83c4:	dc000015 	stw	r16,0(sp)
    83c8:	20000a16 	blt	r4,zero,83f4 <__divsi3+0x38>
    83cc:	0021883a 	mov	r16,zero
    83d0:	28000b16 	blt	r5,zero,8400 <__divsi3+0x44>
    83d4:	000d883a 	mov	r6,zero
    83d8:	00083480 	call	8348 <udivmodsi4>
    83dc:	80000126 	beq	r16,zero,83e4 <__divsi3+0x28>
    83e0:	0085c83a 	sub	r2,zero,r2
    83e4:	dfc00117 	ldw	ra,4(sp)
    83e8:	dc000017 	ldw	r16,0(sp)
    83ec:	dec00204 	addi	sp,sp,8
    83f0:	f800283a 	ret
    83f4:	0109c83a 	sub	r4,zero,r4
    83f8:	04000044 	movi	r16,1
    83fc:	283ff50e 	bge	r5,zero,83d4 <__divsi3+0x18>
    8400:	014bc83a 	sub	r5,zero,r5
    8404:	8400005c 	xori	r16,r16,1
    8408:	003ff206 	br	83d4 <__divsi3+0x18>

0000840c <__modsi3>:
    840c:	deffff04 	addi	sp,sp,-4
    8410:	dfc00015 	stw	ra,0(sp)
    8414:	20000516 	blt	r4,zero,842c <__modsi3+0x20>
    8418:	28000c16 	blt	r5,zero,844c <__modsi3+0x40>
    841c:	01800044 	movi	r6,1
    8420:	dfc00017 	ldw	ra,0(sp)
    8424:	dec00104 	addi	sp,sp,4
    8428:	00083481 	jmpi	8348 <udivmodsi4>
    842c:	0109c83a 	sub	r4,zero,r4
    8430:	28000b16 	blt	r5,zero,8460 <__modsi3+0x54>
    8434:	01800044 	movi	r6,1
    8438:	00083480 	call	8348 <udivmodsi4>
    843c:	0085c83a 	sub	r2,zero,r2
    8440:	dfc00017 	ldw	ra,0(sp)
    8444:	dec00104 	addi	sp,sp,4
    8448:	f800283a 	ret
    844c:	014bc83a 	sub	r5,zero,r5
    8450:	01800044 	movi	r6,1
    8454:	dfc00017 	ldw	ra,0(sp)
    8458:	dec00104 	addi	sp,sp,4
    845c:	00083481 	jmpi	8348 <udivmodsi4>
    8460:	014bc83a 	sub	r5,zero,r5
    8464:	003ff306 	br	8434 <__modsi3+0x28>

00008468 <__udivsi3>:
    8468:	000d883a 	mov	r6,zero
    846c:	00083481 	jmpi	8348 <udivmodsi4>

00008470 <__umodsi3>:
    8470:	01800044 	movi	r6,1
    8474:	00083481 	jmpi	8348 <udivmodsi4>

00008478 <__mulsi3>:
    8478:	0005883a 	mov	r2,zero
    847c:	20000726 	beq	r4,zero,849c <__mulsi3+0x24>
    8480:	20c0004c 	andi	r3,r4,1
    8484:	2008d07a 	srli	r4,r4,1
    8488:	18000126 	beq	r3,zero,8490 <__mulsi3+0x18>
    848c:	1145883a 	add	r2,r2,r5
    8490:	294b883a 	add	r5,r5,r5
    8494:	203ffa1e 	bne	r4,zero,8480 <__mulsi3+0x8>
    8498:	f800283a 	ret
    849c:	f800283a 	ret
