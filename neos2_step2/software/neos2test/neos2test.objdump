
neos2test.elf:     file format elf32-littlenios2
neos2test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000264 memsz 0x00000274 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000024c  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0000826c  0000826c  0000126c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000010  00008284  00008284  00001284  2**2
                  ALLOC, SMALL_DATA
  4 .comment      00000023  00000000  00000000  00001284  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000012a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b45  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000692  00000000  00000000  00001f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e6  00000000  00000000  000025e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00002dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e2  00000000  00000000  00002f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019f  00000000  00000000  0000342a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_alt_sim_info 00000010  00000000  00000000  000035cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000078  00000000  00000000  000035e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .thread_model 00000003  00000000  00000000  0000439d  2**0
                  CONTENTS, READONLY
 15 .cpu          0000000c  00000000  00000000  000043a0  2**0
                  CONTENTS, READONLY
 16 .qsys         00000001  00000000  00000000  000043ac  2**0
                  CONTENTS, READONLY
 17 .simulation_enabled 00000001  00000000  00000000  000043ad  2**0
                  CONTENTS, READONLY
 18 .sysid_hash   00000004  00000000  00000000  000043ae  2**0
                  CONTENTS, READONLY
 19 .sysid_base   00000004  00000000  00000000  000043b2  2**0
                  CONTENTS, READONLY
 20 .sysid_time   00000004  00000000  00000000  000043b6  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000043ba  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000043c5  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000043d0  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  000043db  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000000d  00000000  00000000  000043e4  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0002b71f  00000000  00000000  000043f1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
0000826c l    d  .rodata	00000000 .rodata
00008284 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../neos2test_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 
00008178 g     F .text	0000002c alt_main
00008284 g       *ABS*	00000000 __flash_rwdata_start
000081a4 g     F .text	00000038 alt_putstr
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008288 g     O .bss	00000004 alt_argv
00010284 g       *ABS*	00000000 _gp
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008294 g       *ABS*	00000000 __bss_end
00008234 g     F .text	00000004 alt_dcache_flush_all
00008284 g       *ABS*	00000000 __ram_rwdata_end
00008284 g       *ABS*	00000000 __ram_rodata_end
00008290 g     O .bss	00000004 jtag_uart_0
00008294 g       *ABS*	00000000 end
00010000 g       *ABS*	00000000 __alt_stack_pointer
00008200 g     F .text	00000034 altera_avalon_jtag_uart_write
00008020 g     F .text	0000003c _start
000081fc g     F .text	00000004 alt_sys_init
00008284 g       *ABS*	00000000 __ram_rwdata_start
0000826c g       *ABS*	00000000 __ram_rodata_start
00008294 g       *ABS*	00000000 __alt_stack_base
00008284 g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000018 main
00008284 g     O .bss	00000004 alt_envp
0000826c g       *ABS*	00000000 __flash_rodata_start
000081dc g     F .text	00000020 alt_irq_init
0000828c g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008284 g       *ABS*	00000000 _edata
00008294 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000823c g     F .text	00000008 altera_nios2_qsys_irq_init
00010000 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
00008244 g     F .text	00000028 strlen
00008238 g     F .text	00000004 alt_icache_flush_all
00008074 g     F .text	00000104 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d680a114 	ori	gp,gp,644
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a0a114 	ori	r2,r2,33412

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e0a514 	ori	r3,r3,33428

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00080740 	call	8074 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00081780 	call	8178 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <main>:
 */

#include "sys/alt_stdio.h"

int main()
{ 
    805c:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
    8060:	01000074 	movhi	r4,1
    8064:	21209b04 	addi	r4,r4,-32148
 */

#include "sys/alt_stdio.h"

int main()
{ 
    8068:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
    806c:	00081a40 	call	81a4 <alt_putstr>
    8070:	003fff06 	br	8070 <main+0x14>

00008074 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8074:	deffff04 	addi	sp,sp,-4
    8078:	dfc00015 	stw	ra,0(sp)
    807c:	00c00074 	movhi	r3,1
    8080:	18e0a104 	addi	r3,r3,-32124
    8084:	01000074 	movhi	r4,1
    8088:	2120a104 	addi	r4,r4,-32124

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    808c:	1900061e 	bne	r3,r4,80a8 <alt_load+0x34>
    8090:	00c00074 	movhi	r3,1
    8094:	18e00804 	addi	r3,r3,-32736
    8098:	01000074 	movhi	r4,1
    809c:	21200804 	addi	r4,r4,-32736
    80a0:	1900151e 	bne	r3,r4,80f8 <alt_load+0x84>
    80a4:	00000e06 	br	80e0 <alt_load+0x6c>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
    80a8:	01400074 	movhi	r5,1
    80ac:	2960a104 	addi	r5,r5,-32124
    80b0:	00bfff04 	movi	r2,-4
    80b4:	28cbc83a 	sub	r5,r5,r3
    80b8:	288a703a 	and	r5,r5,r2
    80bc:	0005883a 	mov	r2,zero
    80c0:	00000506 	br	80d8 <alt_load+0x64>
    80c4:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
    80c8:	39c00017 	ldw	r7,0(r7)
    80cc:	188d883a 	add	r6,r3,r2
    80d0:	10800104 	addi	r2,r2,4
    80d4:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    80d8:	117ffa1e 	bne	r2,r5,80c4 <alt_load+0x50>
    80dc:	003fec06 	br	8090 <alt_load+0x1c>
    80e0:	00c00074 	movhi	r3,1
    80e4:	18e09b04 	addi	r3,r3,-32148
    80e8:	01000074 	movhi	r4,1
    80ec:	21209b04 	addi	r4,r4,-32148

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    80f0:	1900131e 	bne	r3,r4,8140 <alt_load+0xcc>
    80f4:	00000e06 	br	8130 <alt_load+0xbc>
    80f8:	01400074 	movhi	r5,1
    80fc:	29600804 	addi	r5,r5,-32736
    8100:	00bfff04 	movi	r2,-4
    8104:	28cbc83a 	sub	r5,r5,r3
    8108:	288a703a 	and	r5,r5,r2
    810c:	0005883a 	mov	r2,zero
    8110:	00000506 	br	8128 <alt_load+0xb4>
    8114:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
    8118:	39c00017 	ldw	r7,0(r7)
    811c:	188d883a 	add	r6,r3,r2
    8120:	10800104 	addi	r2,r2,4
    8124:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8128:	117ffa1e 	bne	r2,r5,8114 <alt_load+0xa0>
    812c:	003fec06 	br	80e0 <alt_load+0x6c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8130:	00082340 	call	8234 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8134:	dfc00017 	ldw	ra,0(sp)
    8138:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    813c:	00082381 	jmpi	8238 <alt_icache_flush_all>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
    8140:	01400074 	movhi	r5,1
    8144:	2960a104 	addi	r5,r5,-32124
    8148:	00bfff04 	movi	r2,-4
    814c:	28cbc83a 	sub	r5,r5,r3
    8150:	288a703a 	and	r5,r5,r2
    8154:	0005883a 	mov	r2,zero
    8158:	00000506 	br	8170 <alt_load+0xfc>
    815c:	208f883a 	add	r7,r4,r2
    {
      *to++ = *from++;
    8160:	39c00017 	ldw	r7,0(r7)
    8164:	188d883a 	add	r6,r3,r2
    8168:	10800104 	addi	r2,r2,4
    816c:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8170:	117ffa1e 	bne	r2,r5,815c <alt_load+0xe8>
    8174:	003fee06 	br	8130 <alt_load+0xbc>

00008178 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8178:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    817c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8180:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8184:	00081dc0 	call	81dc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8188:	00081fc0 	call	81fc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    818c:	d1200217 	ldw	r4,-32760(gp)
    8190:	d1600117 	ldw	r5,-32764(gp)
    8194:	d1a00017 	ldw	r6,-32768(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8198:	dfc00017 	ldw	ra,0(sp)
    819c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    81a0:	000805c1 	jmpi	805c <main>

000081a4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    81a4:	defffe04 	addi	sp,sp,-8
    81a8:	dc000015 	stw	r16,0(sp)
    81ac:	dfc00115 	stw	ra,4(sp)
    81b0:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    81b4:	00082440 	call	8244 <strlen>
    81b8:	01000074 	movhi	r4,1
    81bc:	2120a404 	addi	r4,r4,-32112
    81c0:	800b883a 	mov	r5,r16
    81c4:	100d883a 	mov	r6,r2
    81c8:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    81cc:	dfc00117 	ldw	ra,4(sp)
    81d0:	dc000017 	ldw	r16,0(sp)
    81d4:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    81d8:	00082001 	jmpi	8200 <altera_avalon_jtag_uart_write>

000081dc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    81dc:	deffff04 	addi	sp,sp,-4
    81e0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    81e4:	000823c0 	call	823c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    81e8:	00800044 	movi	r2,1
    81ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    81f0:	dfc00017 	ldw	ra,0(sp)
    81f4:	dec00104 	addi	sp,sp,4
    81f8:	f800283a 	ret

000081fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    81fc:	f800283a 	ret

00008200 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8200:	20c00017 	ldw	r3,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8204:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    8208:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    820c:	19800104 	addi	r6,r3,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8210:	00000606 	br	822c <altera_avalon_jtag_uart_write+0x2c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8214:	31c00037 	ldwio	r7,0(r6)
    8218:	39ffffec 	andhi	r7,r7,65535
    821c:	383ffd26 	beq	r7,zero,8214 <altera_avalon_jtag_uart_write+0x14>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8220:	29c00007 	ldb	r7,0(r5)
    8224:	29400044 	addi	r5,r5,1
    8228:	19c00035 	stwio	r7,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    822c:	293ff936 	bltu	r5,r4,8214 <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    8230:	f800283a 	ret

00008234 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8234:	f800283a 	ret

00008238 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8238:	f800283a 	ret

0000823c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    823c:	000170fa 	wrctl	ienable,zero
    8240:	f800283a 	ret

00008244 <strlen>:
    8244:	20800007 	ldb	r2,0(r4)
    8248:	10000626 	beq	r2,zero,8264 <strlen+0x20>
    824c:	2005883a 	mov	r2,r4
    8250:	10800044 	addi	r2,r2,1
    8254:	10c00007 	ldb	r3,0(r2)
    8258:	183ffd1e 	bne	r3,zero,8250 <strlen+0xc>
    825c:	1105c83a 	sub	r2,r2,r4
    8260:	f800283a 	ret
    8264:	0005883a 	mov	r2,zero
    8268:	f800283a 	ret
